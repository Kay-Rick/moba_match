// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "data_server/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace std;
using namespace  ::save_service;

class SaveHandler : virtual public SaveIf {
 public:
  SaveHandler() {
    // Your initialization goes here
  }

  int32_t save_data(const std::string& username, const std::string& password, const int32_t player1_id, const int32_t player2_id) {
    // Your implementation goes here
    cout << "username: " << username << " password: " << password <<  " player1_id: " << player1_id << " player2_id: " << player2_id << endl;
    return 0;
  }

};

int main(int argc, char **argv) {
  int port = 9091;
  ::std::shared_ptr<SaveHandler> handler(new SaveHandler());
  ::std::shared_ptr<TProcessor> processor(new SaveProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

